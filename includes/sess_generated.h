// // automatically generated by the FlatBuffers compiler, do not modify


// #ifndef FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
// #define FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_

// #include "flatbuffers/flatbuffers.h"

// namespace nyc {
// namespace realtime {

// struct SubwayTripStop;

// struct SubwayTripPath;

// struct SubwayTrip;

// struct SubwayTripStop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
//   enum {
//     VT_STOP_SEQUENCE = 4,
//     VT_STOP_ID = 6,
//     VT_CONFIDENCE = 8,
//     VT_ON = 10,
//     VT_ARRIVAL_TRACK = 12
//   };
//   int8_t stop_sequence() const {
//     return GetField<int8_t>(VT_STOP_SEQUENCE, 0);
//   }
//   const flatbuffers::String *stop_id() const {
//     return GetPointer<const flatbuffers::String *>(VT_STOP_ID);
//   }
//   int8_t confidence() const {
//     return GetField<int8_t>(VT_CONFIDENCE, 0);
//   }
//   int16_t on() const {
//     return GetField<int16_t>(VT_ON, 0);
//   }
//   const flatbuffers::String *arrival_track() const {
//     return GetPointer<const flatbuffers::String *>(VT_ARRIVAL_TRACK);
//   }
//   bool Verify(flatbuffers::Verifier &verifier) const {
//     return VerifyTableStart(verifier) &&
//            VerifyField<int8_t>(verifier, VT_STOP_SEQUENCE) &&
//            VerifyOffset(verifier, VT_STOP_ID) &&
//            verifier.Verify(stop_id()) &&
//            VerifyField<int8_t>(verifier, VT_CONFIDENCE) &&
//            VerifyField<int16_t>(verifier, VT_ON) &&
//            VerifyOffset(verifier, VT_ARRIVAL_TRACK) &&
//            verifier.Verify(arrival_track()) &&
//            verifier.EndTable();
//   }
// };

// struct SubwayTripStopBuilder {
//   flatbuffers::FlatBufferBuilder &fbb_;
//   flatbuffers::uoffset_t start_;
//   void add_stop_sequence(int8_t stop_sequence) {
//     fbb_.AddElement<int8_t>(SubwayTripStop::VT_STOP_SEQUENCE, stop_sequence, 0);
//   }
//   void add_stop_id(flatbuffers::Offset<flatbuffers::String> stop_id) {
//     fbb_.AddOffset(SubwayTripStop::VT_STOP_ID, stop_id);
//   }
//   void add_confidence(int8_t confidence) {
//     fbb_.AddElement<int8_t>(SubwayTripStop::VT_CONFIDENCE, confidence, 0);
//   }
//   void add_on(int16_t on) {
//     fbb_.AddElement<int16_t>(SubwayTripStop::VT_ON, on, 0);
//   }
//   void add_arrival_track(flatbuffers::Offset<flatbuffers::String> arrival_track) {
//     fbb_.AddOffset(SubwayTripStop::VT_ARRIVAL_TRACK, arrival_track);
//   }
//   explicit SubwayTripStopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
//         : fbb_(_fbb) {
//     start_ = fbb_.StartTable();
//   }
//   SubwayTripStopBuilder &operator=(const SubwayTripStopBuilder &);
//   flatbuffers::Offset<SubwayTripStop> Finish() {
//     const auto end = fbb_.EndTable(start_);
//     auto o = flatbuffers::Offset<SubwayTripStop>(end);
//     return o;
//   }
// };

// inline flatbuffers::Offset<SubwayTripStop> CreateSubwayTripStop(
//     flatbuffers::FlatBufferBuilder &_fbb,
//     int8_t stop_sequence = 0,
//     flatbuffers::Offset<flatbuffers::String> stop_id = 0,
//     int8_t confidence = 0,
//     int16_t on = 0,
//     flatbuffers::Offset<flatbuffers::String> arrival_track = 0) {
//   SubwayTripStopBuilder builder_(_fbb);
//   builder_.add_arrival_track(arrival_track);
//   builder_.add_stop_id(stop_id);
//   builder_.add_on(on);
//   builder_.add_confidence(confidence);
//   builder_.add_stop_sequence(stop_sequence);
//   return builder_.Finish();
// }

// inline flatbuffers::Offset<SubwayTripStop> CreateSubwayTripStopDirect(
//     flatbuffers::FlatBufferBuilder &_fbb,
//     int8_t stop_sequence = 0,
//     const char *stop_id = nullptr,
//     int8_t confidence = 0,
//     int16_t on = 0,
//     const char *arrival_track = nullptr) {
//   return nyc::realtime::CreateSubwayTripStop(
//       _fbb,
//       stop_sequence,
//       stop_id ? _fbb.CreateString(stop_id) : 0,
//       confidence,
//       on,
//       arrival_track ? _fbb.CreateString(arrival_track) : 0);
// }

// struct SubwayTripPath FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
//   enum {
//     VT_TRIP_ID = 4,
//     VT_STOPS = 6
//   };
//   const flatbuffers::String *trip_id() const {
//     return GetPointer<const flatbuffers::String *>(VT_TRIP_ID);
//   }
//   const flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>> *stops() const {
//     return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>> *>(VT_STOPS);
//   }
//   bool Verify(flatbuffers::Verifier &verifier) const {
//     return VerifyTableStart(verifier) &&
//            VerifyOffset(verifier, VT_TRIP_ID) &&
//            verifier.Verify(trip_id()) &&
//            VerifyOffset(verifier, VT_STOPS) &&
//            verifier.Verify(stops()) &&
//            verifier.VerifyVectorOfTables(stops()) &&
//            verifier.EndTable();
//   }
// };

// struct SubwayTripPathBuilder {
//   flatbuffers::FlatBufferBuilder &fbb_;
//   flatbuffers::uoffset_t start_;
//   void add_trip_id(flatbuffers::Offset<flatbuffers::String> trip_id) {
//     fbb_.AddOffset(SubwayTripPath::VT_TRIP_ID, trip_id);
//   }
//   void add_stops(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>>> stops) {
//     fbb_.AddOffset(SubwayTripPath::VT_STOPS, stops);
//   }
//   explicit SubwayTripPathBuilder(flatbuffers::FlatBufferBuilder &_fbb)
//         : fbb_(_fbb) {
//     start_ = fbb_.StartTable();
//   }
//   SubwayTripPathBuilder &operator=(const SubwayTripPathBuilder &);
//   flatbuffers::Offset<SubwayTripPath> Finish() {
//     const auto end = fbb_.EndTable(start_);
//     auto o = flatbuffers::Offset<SubwayTripPath>(end);
//     return o;
//   }
// };

// inline flatbuffers::Offset<SubwayTripPath> CreateSubwayTripPath(
//     flatbuffers::FlatBufferBuilder &_fbb,
//     flatbuffers::Offset<flatbuffers::String> trip_id = 0,
//     flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>>> stops = 0) {
//   SubwayTripPathBuilder builder_(_fbb);
//   builder_.add_stops(stops);
//   builder_.add_trip_id(trip_id);
//   return builder_.Finish();
// }

// inline flatbuffers::Offset<SubwayTripPath> CreateSubwayTripPathDirect(
//     flatbuffers::FlatBufferBuilder &_fbb,
//     const char *trip_id = nullptr,
//     const std::vector<flatbuffers::Offset<SubwayTripStop>> *stops = nullptr) {
//   return nyc::realtime::CreateSubwayTripPath(
//       _fbb,
//       trip_id ? _fbb.CreateString(trip_id) : 0,
//       stops ? _fbb.CreateVector<flatbuffers::Offset<SubwayTripStop>>(*stops) : 0);
// }

// struct SubwayTrip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
//   enum {
//     VT_NYCT_TRIP_ID = 4,
//     VT_TIMESTAMP = 6,
//     VT_PATHS = 8,
//     VT_DIRECTION = 10
//   };
//   const flatbuffers::String *nyct_trip_id() const {
//     return GetPointer<const flatbuffers::String *>(VT_NYCT_TRIP_ID);
//   }
//   int32_t timestamp() const {
//     return GetField<int32_t>(VT_TIMESTAMP, 0);
//   }
//   const flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>> *paths() const {
//     return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>> *>(VT_PATHS);
//   }
//   int8_t direction() const {
//     return GetField<int8_t>(VT_DIRECTION, 0);
//   }
//   bool Verify(flatbuffers::Verifier &verifier) const {
//     return VerifyTableStart(verifier) &&
//            VerifyOffset(verifier, VT_NYCT_TRIP_ID) &&
//            verifier.Verify(nyct_trip_id()) &&
//            VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
//            VerifyOffset(verifier, VT_PATHS) &&
//            verifier.Verify(paths()) &&
//            verifier.VerifyVectorOfTables(paths()) &&
//            VerifyField<int8_t>(verifier, VT_DIRECTION) &&
//            verifier.EndTable();
//   }
// };

// struct SubwayTripBuilder {
//   flatbuffers::FlatBufferBuilder &fbb_;
//   flatbuffers::uoffset_t start_;
//   void add_nyct_trip_id(flatbuffers::Offset<flatbuffers::String> nyct_trip_id) {
//     fbb_.AddOffset(SubwayTrip::VT_NYCT_TRIP_ID, nyct_trip_id);
//   }
//   void add_timestamp(int32_t timestamp) {
//     fbb_.AddElement<int32_t>(SubwayTrip::VT_TIMESTAMP, timestamp, 0);
//   }
//   void add_paths(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>>> paths) {
//     fbb_.AddOffset(SubwayTrip::VT_PATHS, paths);
//   }
//   void add_direction(int8_t direction) {
//     fbb_.AddElement<int8_t>(SubwayTrip::VT_DIRECTION, direction, 0);
//   }
//   explicit SubwayTripBuilder(flatbuffers::FlatBufferBuilder &_fbb)
//         : fbb_(_fbb) {
//     start_ = fbb_.StartTable();
//   }
//   SubwayTripBuilder &operator=(const SubwayTripBuilder &);
//   flatbuffers::Offset<SubwayTrip> Finish() {
//     const auto end = fbb_.EndTable(start_);
//     auto o = flatbuffers::Offset<SubwayTrip>(end);
//     return o;
//   }
// };

// inline flatbuffers::Offset<SubwayTrip> CreateSubwayTrip(
//     flatbuffers::FlatBufferBuilder &_fbb,
//     flatbuffers::Offset<flatbuffers::String> nyct_trip_id = 0,
//     int32_t timestamp = 0,
//     flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>>> paths = 0,
//     int8_t direction = 0) {
//   SubwayTripBuilder builder_(_fbb);
//   builder_.add_paths(paths);
//   builder_.add_timestamp(timestamp);
//   builder_.add_nyct_trip_id(nyct_trip_id);
//   builder_.add_direction(direction);
//   return builder_.Finish();
// }

// inline flatbuffers::Offset<SubwayTrip> CreateSubwayTripDirect(
//     flatbuffers::FlatBufferBuilder &_fbb,
//     const char *nyct_trip_id = nullptr,
//     int32_t timestamp = 0,
//     const std::vector<flatbuffers::Offset<SubwayTripPath>> *paths = nullptr,
//     int8_t direction = 0) {
//   return nyc::realtime::CreateSubwayTrip(
//       _fbb,
//       nyct_trip_id ? _fbb.CreateString(nyct_trip_id) : 0,
//       timestamp,
//       paths ? _fbb.CreateVector<flatbuffers::Offset<SubwayTripPath>>(*paths) : 0,
//       direction);
// }

// }  // namespace realtime
// }  // namespace nyc

// #endif  // FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
