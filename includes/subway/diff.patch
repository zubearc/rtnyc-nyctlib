diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4e2e800..3a4bb1d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -37,6 +37,7 @@ else()
 	find_package(ZLIB REQUIRED)
 	find_package(OpenSSL REQUIRED)
 	find_package(Flatbuffers REQUIRED)
+	find_path(UWEBSOCKETS_INCLUDE_DIRS "uwebsockets/App.h")
 
 	message("CURL install dir is ${CURL_INCLUDE_DIR}")
 
@@ -61,7 +62,6 @@ else()
 	include_directories(${CURL_INCLUDE_DIRS})
 	if (NOT NO_INTERFACE_BUILD)
 		find_library(uv REQUIRED)
-		find_library(uwebsockets REQUIRED)
 
 		# monolithic dependencies to get basic websockets ...
 		target_link_libraries(NYCTLib PRIVATE ZLIB::ZLIB)
@@ -72,18 +72,24 @@ else()
 
 		message("ZLIB install lib dir is ${ZLIB_LIBRARIES}")
 		message("OPENSSL intall lib dir is ${OPENSSL_LIBRARIES}")
+		message("uv install lib dir is ${uv_LIBRARIES}")
+		message("uwebsockets install lib dir is ${uwebsockets_LIBRARIES}")
 	else()
 		add_definitions("-DNO_INTERFACES")
 	endif()
 endif()
 # TODO: Add tests and install targets if needed.
 
-find_package(protobuf CONFIG REQUIRED)
+find_package(Protobuf REQUIRED)
 target_link_libraries(NYCTLib PRIVATE protobuf::libprotobuf)
 include_directories(${protobuf_INCLUDE_DIR})
-include_directories(${uwebsockets_INCLUDE_DIR})
+include_directories(${UWEBSOCKETS_INCLUDE_DIRS})
 include_directories(${flatbuffers_INCLUDE_DIR})
 
+message("Protobuf include dir is ${protobuf_INCLUDE_DIR}")
+message("uwebsockets include dir is ${UWEBSOCKETS_INCLUDE_DIRS}")
+message("flatbuffers include dir is ${flatbuffers_INCLUDE_DIR}")
+
 # below is debug code to print all CMake variables
 #get_cmake_property(_variableNames VARIABLES)
 #list (SORT _variableNames)
diff --git a/NYCTLib.cpp b/NYCTLib.cpp
index d98598d..8196653 100644
--- a/NYCTLib.cpp
+++ b/NYCTLib.cpp
@@ -203,8 +203,12 @@ int main(int argc, char *argv[]) {
 		}
 
 		if (subwayFeedParam.length()) {
+			// https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-ace
+			// New API endpoint
 			INYCTFeedServicePtr feedService = std::make_unique<DynamicNYCTFeedService>(
-				("http://datamine.mta.info/mta_esi.php?key=" + apikey_str + "&feed_id=" + subwayFeedParam));
+				"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/" + subwayFeedParam + "?key=" + apikey_str);
+			// INYCTFeedServicePtr feedService = std::make_unique<DynamicNYCTFeedService>(
+			// 	("http://datamine.mta.info/mta_esi.php?key=" + apikey_str + "&feed_id=" + subwayFeedParam));
 
 			auto event_holder = std::make_shared<BlockingEventHolder<SubwayTripEvent>>();
 			NYCTFeedTracker nyctFeedTracker(feedService, event_holder);
diff --git a/includes/DynamicNYCTFeedService.h b/includes/DynamicNYCTFeedService.h
index 0414a2c..6e2c464 100644
--- a/includes/DynamicNYCTFeedService.h
+++ b/includes/DynamicNYCTFeedService.h
@@ -7,9 +7,11 @@ namespace nyctlib {
 	private:
 		long long latest_feed_stamp = 0;
 		std::string feed_endpoint;
+		std::string api_key;
 	public:
-		DynamicNYCTFeedService(std::string feed_endpoint) {
+		DynamicNYCTFeedService(std::string feed_endpoint, std::string api_key = "") {
 			this->feed_endpoint = feed_endpoint;
+			this->api_key = api_key;
 		}
 		virtual void update();
 		virtual std::shared_ptr<NYCTFeedParser> getCurrentFeed();
diff --git a/includes/SimpleHTTPRequest.h b/includes/SimpleHTTPRequest.h
index 8fb638f..c82af5c 100644
--- a/includes/SimpleHTTPRequest.h
+++ b/includes/SimpleHTTPRequest.h
@@ -27,7 +27,7 @@ public:
 		curl = curl_easy_init();
 	}
 
-	bool get_save(const char *url, const char *filename) {
+	bool get_save(const char *url, const char *filename, std::string apiKey = "") {
 		FILE *file = fopen(filename, "wb");
 		if (file == NULL) {
 			printf("Failed to open file %s!\n", filename);
@@ -38,6 +38,13 @@ public:
 		curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
 		curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, curl_write_data_file);
 		curl_easy_setopt(curl, CURLOPT_WRITEDATA, file);
+		// set x-api-key header
+		if (apiKey != "") {
+			struct curl_slist *headers = NULL;
+			auto header = std::string("x-api-key: ") + apiKey;
+			headers = curl_slist_append(headers, header.c_str());
+			curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
+		}
 		/* Perform the request, res will get the return code */
 		CURLcode res = curl_easy_perform(curl);
 		fclose(file);
diff --git a/includes/rtnyc_protocol_generated.h b/includes/rtnyc_protocol_generated.h
index 43df8fb..02785ec 100644
--- a/includes/rtnyc_protocol_generated.h
+++ b/includes/rtnyc_protocol_generated.h
@@ -1,8 +1,8 @@
 // automatically generated by the FlatBuffers compiler, do not modify
 
 
-#ifndef FLATBUFFERS_GENERATED_RTNYCPROTOCOL_NYC_REALTIME_H_
-#define FLATBUFFERS_GENERATED_RTNYCPROTOCOL_NYC_REALTIME_H_
+#ifndef FLATBUFFERS_GENERATED_SCHEMA_NYC_REALTIME_H_
+#define FLATBUFFERS_GENERATED_SCHEMA_NYC_REALTIME_H_
 
 #include "flatbuffers/flatbuffers.h"
 
@@ -71,7 +71,8 @@ inline const char * const *EnumNamesTripStatus() {
 }
 
 inline const char *EnumNameTripStatus(TripStatus e) {
-  const size_t index = static_cast<int>(e);
+  if (e < TripStatus_AtStation || e > TripStatus_EnrouteToStation) return "";
+  const size_t index = static_cast<size_t>(e);
   return EnumNamesTripStatus()[index];
 }
 
@@ -106,7 +107,8 @@ inline const char * const *EnumNamesDirection() {
 }
 
 inline const char *EnumNameDirection(Direction e) {
-  const size_t index = static_cast<int>(e);
+  if (e < Direction_North || e > Direction_West) return "";
+  const size_t index = static_cast<size_t>(e);
   return EnumNamesDirection()[index];
 }
 
@@ -139,7 +141,7 @@ inline flatbuffers::Offset<_Version3> Create_Version3(
 }
 
 struct ClientCommandProxyRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_USER_ADDRESS = 4,
     VT_REQUEST_ID = 6,
     VT_PAYLOAD = 8
@@ -158,7 +160,7 @@ struct ClientCommandProxyRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::
            VerifyField<int32_t>(verifier, VT_USER_ADDRESS) &&
            VerifyField<int32_t>(verifier, VT_REQUEST_ID) &&
            VerifyOffset(verifier, VT_PAYLOAD) &&
-           verifier.Verify(payload()) &&
+           verifier.VerifyString(payload()) &&
            verifier.EndTable();
   }
 };
@@ -204,15 +206,16 @@ inline flatbuffers::Offset<ClientCommandProxyRequest> CreateClientCommandProxyRe
     int32_t user_address = 0,
     int32_t request_id = 0,
     const char *payload = nullptr) {
+  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
   return nyc::realtime::CreateClientCommandProxyRequest(
       _fbb,
       user_address,
       request_id,
-      payload ? _fbb.CreateString(payload) : 0);
+      payload__);
 }
 
 struct ClientCommandProxyResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_REQUEST_ID = 4,
     VT_FORMAT = 6,
     VT_PAYLOAD = 8
@@ -231,7 +234,7 @@ struct ClientCommandProxyResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers:
            VerifyField<int32_t>(verifier, VT_REQUEST_ID) &&
            VerifyField<int8_t>(verifier, VT_FORMAT) &&
            VerifyOffset(verifier, VT_PAYLOAD) &&
-           verifier.Verify(payload()) &&
+           verifier.VerifyString(payload()) &&
            verifier.EndTable();
   }
 };
@@ -277,15 +280,16 @@ inline flatbuffers::Offset<ClientCommandProxyResponse> CreateClientCommandProxyR
     int32_t request_id = 0,
     int8_t format = 0,
     const char *payload = nullptr) {
+  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
   return nyc::realtime::CreateClientCommandProxyResponse(
       _fbb,
       request_id,
       format,
-      payload ? _fbb.CreateString(payload) : 0);
+      payload__);
 }
 
 struct Position FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_LATITUDE = 4,
     VT_LONGITUDE = 6,
     VT_BEARING = 8
@@ -345,7 +349,7 @@ inline flatbuffers::Offset<Position> CreatePosition(
 }
 
 struct NYCSubwayTrip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_GTFS_TRIP_ID = 4,
     VT_TRIP_ID = 6,
     VT_START_TIME = 8,
@@ -374,12 +378,12 @@ struct NYCSubwayTrip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   bool Verify(flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_GTFS_TRIP_ID) &&
-           verifier.Verify(gtfs_trip_id()) &&
+           verifier.VerifyString(gtfs_trip_id()) &&
            VerifyOffset(verifier, VT_TRIP_ID) &&
-           verifier.Verify(trip_id()) &&
+           verifier.VerifyString(trip_id()) &&
            VerifyField<int32_t>(verifier, VT_START_TIME) &&
            VerifyOffset(verifier, VT_ROUTE_ID) &&
-           verifier.Verify(route_id()) &&
+           verifier.VerifyString(route_id()) &&
            VerifyField<uint8_t>(verifier, VT_ASSIGNED) &&
            VerifyField<int8_t>(verifier, VT_DIRECTION) &&
            verifier.EndTable();
@@ -445,18 +449,21 @@ inline flatbuffers::Offset<NYCSubwayTrip> CreateNYCSubwayTripDirect(
     const char *route_id = nullptr,
     bool assigned = false,
     Direction direction = Direction_North) {
+  auto gtfs_trip_id__ = gtfs_trip_id ? _fbb.CreateString(gtfs_trip_id) : 0;
+  auto trip_id__ = trip_id ? _fbb.CreateString(trip_id) : 0;
+  auto route_id__ = route_id ? _fbb.CreateString(route_id) : 0;
   return nyc::realtime::CreateNYCSubwayTrip(
       _fbb,
-      gtfs_trip_id ? _fbb.CreateString(gtfs_trip_id) : 0,
-      trip_id ? _fbb.CreateString(trip_id) : 0,
+      gtfs_trip_id__,
+      trip_id__,
       start_time,
-      route_id ? _fbb.CreateString(route_id) : 0,
+      route_id__,
       assigned,
       direction);
 }
 
 struct NYCSubwaySchedule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_SCHEDULED_TRACK = 4,
     VT_ACTUAL_TRACK = 6,
     VT_ARRIVAL_TIME = 8,
@@ -481,13 +488,13 @@ struct NYCSubwaySchedule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   bool Verify(flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_SCHEDULED_TRACK) &&
-           verifier.Verify(scheduled_track()) &&
+           verifier.VerifyString(scheduled_track()) &&
            VerifyOffset(verifier, VT_ACTUAL_TRACK) &&
-           verifier.Verify(actual_track()) &&
+           verifier.VerifyString(actual_track()) &&
            VerifyField<int32_t>(verifier, VT_ARRIVAL_TIME) &&
            VerifyField<int32_t>(verifier, VT_DEPARTURE_TIME) &&
            VerifyOffset(verifier, VT_STOP_ID) &&
-           verifier.Verify(stop_id()) &&
+           verifier.VerifyString(stop_id()) &&
            verifier.EndTable();
   }
 };
@@ -545,17 +552,20 @@ inline flatbuffers::Offset<NYCSubwaySchedule> CreateNYCSubwayScheduleDirect(
     int32_t arrival_time = 0,
     int32_t departure_time = 0,
     const char *stop_id = nullptr) {
+  auto scheduled_track__ = scheduled_track ? _fbb.CreateString(scheduled_track) : 0;
+  auto actual_track__ = actual_track ? _fbb.CreateString(actual_track) : 0;
+  auto stop_id__ = stop_id ? _fbb.CreateString(stop_id) : 0;
   return nyc::realtime::CreateNYCSubwaySchedule(
       _fbb,
-      scheduled_track ? _fbb.CreateString(scheduled_track) : 0,
-      actual_track ? _fbb.CreateString(actual_track) : 0,
+      scheduled_track__,
+      actual_track__,
       arrival_time,
       departure_time,
-      stop_id ? _fbb.CreateString(stop_id) : 0);
+      stop_id__);
 }
 
 struct NYCSubwayVehiclePosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_STOP_ID = 4,
     VT_TRACK = 6,
     VT_RELATIVE_STATUS = 8,
@@ -576,9 +586,9 @@ struct NYCSubwayVehiclePosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::T
   bool Verify(flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_STOP_ID) &&
-           verifier.Verify(stop_id()) &&
+           verifier.VerifyString(stop_id()) &&
            VerifyOffset(verifier, VT_TRACK) &&
-           verifier.Verify(track()) &&
+           verifier.VerifyString(track()) &&
            VerifyField<int8_t>(verifier, VT_RELATIVE_STATUS) &&
            VerifyField<int32_t>(verifier, VT_STOP_INDEX) &&
            verifier.EndTable();
@@ -632,16 +642,18 @@ inline flatbuffers::Offset<NYCSubwayVehiclePosition> CreateNYCSubwayVehiclePosit
     const char *track = nullptr,
     TripStatus relative_status = TripStatus_AtStation,
     int32_t stop_index = 0) {
+  auto stop_id__ = stop_id ? _fbb.CreateString(stop_id) : 0;
+  auto track__ = track ? _fbb.CreateString(track) : 0;
   return nyc::realtime::CreateNYCSubwayVehiclePosition(
       _fbb,
-      stop_id ? _fbb.CreateString(stop_id) : 0,
-      track ? _fbb.CreateString(track) : 0,
+      stop_id__,
+      track__,
       relative_status,
       stop_index);
 }
 
 struct NYCBusTrip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_GTFS_TRIP_ID = 4,
     VT_ROUTE_ID = 6,
     VT_START_DATE = 8,
@@ -662,13 +674,13 @@ struct NYCBusTrip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   bool Verify(flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_GTFS_TRIP_ID) &&
-           verifier.Verify(gtfs_trip_id()) &&
+           verifier.VerifyString(gtfs_trip_id()) &&
            VerifyOffset(verifier, VT_ROUTE_ID) &&
-           verifier.Verify(route_id()) &&
+           verifier.VerifyString(route_id()) &&
            VerifyOffset(verifier, VT_START_DATE) &&
-           verifier.Verify(start_date()) &&
+           verifier.VerifyString(start_date()) &&
            VerifyOffset(verifier, VT_VEHICLE_ID) &&
-           verifier.Verify(vehicle_id()) &&
+           verifier.VerifyString(vehicle_id()) &&
            verifier.EndTable();
   }
 };
@@ -720,16 +732,20 @@ inline flatbuffers::Offset<NYCBusTrip> CreateNYCBusTripDirect(
     const char *route_id = nullptr,
     const char *start_date = nullptr,
     const char *vehicle_id = nullptr) {
+  auto gtfs_trip_id__ = gtfs_trip_id ? _fbb.CreateString(gtfs_trip_id) : 0;
+  auto route_id__ = route_id ? _fbb.CreateString(route_id) : 0;
+  auto start_date__ = start_date ? _fbb.CreateString(start_date) : 0;
+  auto vehicle_id__ = vehicle_id ? _fbb.CreateString(vehicle_id) : 0;
   return nyc::realtime::CreateNYCBusTrip(
       _fbb,
-      gtfs_trip_id ? _fbb.CreateString(gtfs_trip_id) : 0,
-      route_id ? _fbb.CreateString(route_id) : 0,
-      start_date ? _fbb.CreateString(start_date) : 0,
-      vehicle_id ? _fbb.CreateString(vehicle_id) : 0);
+      gtfs_trip_id__,
+      route_id__,
+      start_date__,
+      vehicle_id__);
 }
 
 struct NYCBusSchedule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ARRIVAL_TIME = 4,
     VT_DEPARTURE_TIME = 6,
     VT_STOP_ID = 8
@@ -748,7 +764,7 @@ struct NYCBusSchedule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
            VerifyField<int32_t>(verifier, VT_ARRIVAL_TIME) &&
            VerifyField<int32_t>(verifier, VT_DEPARTURE_TIME) &&
            VerifyOffset(verifier, VT_STOP_ID) &&
-           verifier.Verify(stop_id()) &&
+           verifier.VerifyString(stop_id()) &&
            verifier.EndTable();
   }
 };
@@ -794,15 +810,16 @@ inline flatbuffers::Offset<NYCBusSchedule> CreateNYCBusScheduleDirect(
     int32_t arrival_time = 0,
     int32_t departure_time = 0,
     const char *stop_id = nullptr) {
+  auto stop_id__ = stop_id ? _fbb.CreateString(stop_id) : 0;
   return nyc::realtime::CreateNYCBusSchedule(
       _fbb,
       arrival_time,
       departure_time,
-      stop_id ? _fbb.CreateString(stop_id) : 0);
+      stop_id__);
 }
 
 struct NYCSubwayStopUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_TRIP_ID = 6,
     VT_CURRENT_STATUS = 8,
@@ -856,20 +873,20 @@ struct NYCSubwayStopUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
     return VerifyTableStart(verifier) &&
            VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
            VerifyOffset(verifier, VT_TRIP_ID) &&
-           verifier.Verify(trip_id()) &&
+           verifier.VerifyString(trip_id()) &&
            VerifyField<int8_t>(verifier, VT_CURRENT_STATUS) &&
            VerifyField<int32_t>(verifier, VT_CUMULATIVE_ARRIVAL_DELAY) &&
            VerifyField<int32_t>(verifier, VT_CUMULATIVE_DEPARTURE_DELAY) &&
            VerifyField<uint8_t>(verifier, VT_ON_SCHEDULE) &&
            VerifyOffset(verifier, VT_CURRENT_STOP_ID) &&
-           verifier.Verify(current_stop_id()) &&
+           verifier.VerifyString(current_stop_id()) &&
            VerifyField<int32_t>(verifier, VT_CURRENT_STOP_DEPARTING_ON) &&
            VerifyOffset(verifier, VT_NEXT_STOP_ID) &&
-           verifier.Verify(next_stop_id()) &&
+           verifier.VerifyString(next_stop_id()) &&
            VerifyField<int32_t>(verifier, VT_NEXT_STOP_ARRIVING_ON) &&
            VerifyField<int32_t>(verifier, VT_NEXT_STOP_DEPARTING_ON) &&
            VerifyOffset(verifier, VT_LAST_STOP_ID) &&
-           verifier.Verify(last_stop_id()) &&
+           verifier.VerifyString(last_stop_id()) &&
            verifier.EndTable();
   }
 };
@@ -969,24 +986,28 @@ inline flatbuffers::Offset<NYCSubwayStopUpdate> CreateNYCSubwayStopUpdateDirect(
     int32_t next_stop_arriving_on = 0,
     int32_t next_stop_departing_on = 0,
     const char *last_stop_id = nullptr) {
+  auto trip_id__ = trip_id ? _fbb.CreateString(trip_id) : 0;
+  auto current_stop_id__ = current_stop_id ? _fbb.CreateString(current_stop_id) : 0;
+  auto next_stop_id__ = next_stop_id ? _fbb.CreateString(next_stop_id) : 0;
+  auto last_stop_id__ = last_stop_id ? _fbb.CreateString(last_stop_id) : 0;
   return nyc::realtime::CreateNYCSubwayStopUpdate(
       _fbb,
       timestamp,
-      trip_id ? _fbb.CreateString(trip_id) : 0,
+      trip_id__,
       current_status,
       cumulative_arrival_delay,
       cumulative_departure_delay,
       on_schedule,
-      current_stop_id ? _fbb.CreateString(current_stop_id) : 0,
+      current_stop_id__,
       current_stop_departing_on,
-      next_stop_id ? _fbb.CreateString(next_stop_id) : 0,
+      next_stop_id__,
       next_stop_arriving_on,
       next_stop_departing_on,
-      last_stop_id ? _fbb.CreateString(last_stop_id) : 0);
+      last_stop_id__);
 }
 
 struct NYCSubwayScheduleUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_TRIP = 6,
     VT_SCHEDULE = 8,
@@ -1010,7 +1031,7 @@ struct NYCSubwayScheduleUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Ta
            VerifyOffset(verifier, VT_TRIP) &&
            verifier.VerifyTable(trip()) &&
            VerifyOffset(verifier, VT_SCHEDULE) &&
-           verifier.Verify(schedule()) &&
+           verifier.VerifyVector(schedule()) &&
            verifier.VerifyVectorOfTables(schedule()) &&
            VerifyOffset(verifier, VT_LAST_VEHICLE_POSITION) &&
            verifier.VerifyTable(last_vehicle_position()) &&
@@ -1065,16 +1086,17 @@ inline flatbuffers::Offset<NYCSubwayScheduleUpdate> CreateNYCSubwayScheduleUpdat
     flatbuffers::Offset<NYCSubwayTrip> trip = 0,
     const std::vector<flatbuffers::Offset<NYCSubwaySchedule>> *schedule = nullptr,
     flatbuffers::Offset<NYCSubwayVehiclePosition> last_vehicle_position = 0) {
+  auto schedule__ = schedule ? _fbb.CreateVector<flatbuffers::Offset<NYCSubwaySchedule>>(*schedule) : 0;
   return nyc::realtime::CreateNYCSubwayScheduleUpdate(
       _fbb,
       timestamp,
       trip,
-      schedule ? _fbb.CreateVector<flatbuffers::Offset<NYCSubwaySchedule>>(*schedule) : 0,
+      schedule__,
       last_vehicle_position);
 }
 
 struct NYCSubwayTrips FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_TRIPS = 6
   };
@@ -1088,7 +1110,7 @@ struct NYCSubwayTrips FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     return VerifyTableStart(verifier) &&
            VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
            VerifyOffset(verifier, VT_TRIPS) &&
-           verifier.Verify(trips()) &&
+           verifier.VerifyVector(trips()) &&
            verifier.VerifyVectorOfTables(trips()) &&
            verifier.EndTable();
   }
@@ -1129,14 +1151,15 @@ inline flatbuffers::Offset<NYCSubwayTrips> CreateNYCSubwayTripsDirect(
     flatbuffers::FlatBufferBuilder &_fbb,
     int32_t timestamp = 0,
     const std::vector<flatbuffers::Offset<NYCSubwayScheduleUpdate>> *trips = nullptr) {
+  auto trips__ = trips ? _fbb.CreateVector<flatbuffers::Offset<NYCSubwayScheduleUpdate>>(*trips) : 0;
   return nyc::realtime::CreateNYCSubwayTrips(
       _fbb,
       timestamp,
-      trips ? _fbb.CreateVector<flatbuffers::Offset<NYCSubwayScheduleUpdate>>(*trips) : 0);
+      trips__);
 }
 
 struct NYCSubwayTripComplete FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_TRIP_ID = 6
   };
@@ -1150,7 +1173,7 @@ struct NYCSubwayTripComplete FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tabl
     return VerifyTableStart(verifier) &&
            VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
            VerifyOffset(verifier, VT_TRIP_ID) &&
-           verifier.Verify(trip_id()) &&
+           verifier.VerifyString(trip_id()) &&
            verifier.EndTable();
   }
 };
@@ -1190,14 +1213,15 @@ inline flatbuffers::Offset<NYCSubwayTripComplete> CreateNYCSubwayTripCompleteDir
     flatbuffers::FlatBufferBuilder &_fbb,
     int32_t timestamp = 0,
     const char *trip_id = nullptr) {
+  auto trip_id__ = trip_id ? _fbb.CreateString(trip_id) : 0;
   return nyc::realtime::CreateNYCSubwayTripComplete(
       _fbb,
       timestamp,
-      trip_id ? _fbb.CreateString(trip_id) : 0);
+      trip_id__);
 }
 
 struct NYCBusStopUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_TRIP = 6,
     VT_CURRENT_STATUS = 8,
@@ -1234,7 +1258,7 @@ struct NYCBusStopUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
            verifier.VerifyTable(trip()) &&
            VerifyField<int8_t>(verifier, VT_CURRENT_STATUS) &&
            VerifyOffset(verifier, VT_STOP_ID) &&
-           verifier.Verify(stop_id()) &&
+           verifier.VerifyString(stop_id()) &&
            VerifyField<int32_t>(verifier, VT_STOP_DEPARTING_ON) &&
            VerifyOffset(verifier, VT_POSITION) &&
            verifier.VerifyTable(position()) &&
@@ -1308,19 +1332,20 @@ inline flatbuffers::Offset<NYCBusStopUpdate> CreateNYCBusStopUpdateDirect(
     int32_t stop_departing_on = 0,
     flatbuffers::Offset<Position> position = 0,
     int32_t delay = 0) {
+  auto stop_id__ = stop_id ? _fbb.CreateString(stop_id) : 0;
   return nyc::realtime::CreateNYCBusStopUpdate(
       _fbb,
       timestamp,
       trip,
       current_status,
-      stop_id ? _fbb.CreateString(stop_id) : 0,
+      stop_id__,
       stop_departing_on,
       position,
       delay);
 }
 
 struct NYCBusScheduleUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_TRIP = 6,
     VT_SCHEDULE = 8,
@@ -1344,10 +1369,10 @@ struct NYCBusScheduleUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
            VerifyOffset(verifier, VT_TRIP) &&
            verifier.VerifyTable(trip()) &&
            VerifyOffset(verifier, VT_SCHEDULE) &&
-           verifier.Verify(schedule()) &&
+           verifier.VerifyVector(schedule()) &&
            verifier.VerifyVectorOfTables(schedule()) &&
            VerifyOffset(verifier, VT_CURRENT_STOP_ID) &&
-           verifier.Verify(current_stop_id()) &&
+           verifier.VerifyString(current_stop_id()) &&
            verifier.EndTable();
   }
 };
@@ -1399,16 +1424,18 @@ inline flatbuffers::Offset<NYCBusScheduleUpdate> CreateNYCBusScheduleUpdateDirec
     flatbuffers::Offset<NYCBusTrip> trip = 0,
     const std::vector<flatbuffers::Offset<NYCBusSchedule>> *schedule = nullptr,
     const char *current_stop_id = nullptr) {
+  auto schedule__ = schedule ? _fbb.CreateVector<flatbuffers::Offset<NYCBusSchedule>>(*schedule) : 0;
+  auto current_stop_id__ = current_stop_id ? _fbb.CreateString(current_stop_id) : 0;
   return nyc::realtime::CreateNYCBusScheduleUpdate(
       _fbb,
       timestamp,
       trip,
-      schedule ? _fbb.CreateVector<flatbuffers::Offset<NYCBusSchedule>>(*schedule) : 0,
-      current_stop_id ? _fbb.CreateString(current_stop_id) : 0);
+      schedule__,
+      current_stop_id__);
 }
 
 struct NYCBusTrips FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_TRIPS = 6
   };
@@ -1422,7 +1449,7 @@ struct NYCBusTrips FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     return VerifyTableStart(verifier) &&
            VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
            VerifyOffset(verifier, VT_TRIPS) &&
-           verifier.Verify(trips()) &&
+           verifier.VerifyVector(trips()) &&
            verifier.VerifyVectorOfTables(trips()) &&
            verifier.EndTable();
   }
@@ -1463,14 +1490,15 @@ inline flatbuffers::Offset<NYCBusTrips> CreateNYCBusTripsDirect(
     flatbuffers::FlatBufferBuilder &_fbb,
     int32_t timestamp = 0,
     const std::vector<flatbuffers::Offset<NYCBusScheduleUpdate>> *trips = nullptr) {
+  auto trips__ = trips ? _fbb.CreateVector<flatbuffers::Offset<NYCBusScheduleUpdate>>(*trips) : 0;
   return nyc::realtime::CreateNYCBusTrips(
       _fbb,
       timestamp,
-      trips ? _fbb.CreateVector<flatbuffers::Offset<NYCBusScheduleUpdate>>(*trips) : 0);
+      trips__);
 }
 
 struct NYCBusTripComplete FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
+  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TIMESTAMP = 4,
     VT_VEHICLE_ID = 6
   };
@@ -1484,7 +1512,7 @@ struct NYCBusTripComplete FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     return VerifyTableStart(verifier) &&
            VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
            VerifyOffset(verifier, VT_VEHICLE_ID) &&
-           verifier.Verify(vehicle_id()) &&
+           verifier.VerifyString(vehicle_id()) &&
            verifier.EndTable();
   }
 };
@@ -1524,13 +1552,14 @@ inline flatbuffers::Offset<NYCBusTripComplete> CreateNYCBusTripCompleteDirect(
     flatbuffers::FlatBufferBuilder &_fbb,
     int32_t timestamp = 0,
     const char *vehicle_id = nullptr) {
+  auto vehicle_id__ = vehicle_id ? _fbb.CreateString(vehicle_id) : 0;
   return nyc::realtime::CreateNYCBusTripComplete(
       _fbb,
       timestamp,
-      vehicle_id ? _fbb.CreateString(vehicle_id) : 0);
+      vehicle_id__);
 }
 
 }  // namespace realtime
 }  // namespace nyc
 
-#endif  // FLATBUFFERS_GENERATED_RTNYCPROTOCOL_NYC_REALTIME_H_
+#endif  // FLATBUFFERS_GENERATED_SCHEMA_NYC_REALTIME_H_
diff --git a/includes/sess_generated.h b/includes/sess_generated.h
index 341d0bb..b395dc5 100644
--- a/includes/sess_generated.h
+++ b/includes/sess_generated.h
@@ -1,269 +1,269 @@
-// automatically generated by the FlatBuffers compiler, do not modify
+// // automatically generated by the FlatBuffers compiler, do not modify
 
 
-#ifndef FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
-#define FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
+// #ifndef FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
+// #define FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
 
-#include "flatbuffers/flatbuffers.h"
+// #include "flatbuffers/flatbuffers.h"
 
-namespace nyc {
-namespace realtime {
+// namespace nyc {
+// namespace realtime {
 
-struct SubwayTripStop;
+// struct SubwayTripStop;
 
-struct SubwayTripPath;
+// struct SubwayTripPath;
 
-struct SubwayTrip;
+// struct SubwayTrip;
 
-struct SubwayTripStop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
-    VT_STOP_SEQUENCE = 4,
-    VT_STOP_ID = 6,
-    VT_CONFIDENCE = 8,
-    VT_ON = 10,
-    VT_ARRIVAL_TRACK = 12
-  };
-  int8_t stop_sequence() const {
-    return GetField<int8_t>(VT_STOP_SEQUENCE, 0);
-  }
-  const flatbuffers::String *stop_id() const {
-    return GetPointer<const flatbuffers::String *>(VT_STOP_ID);
-  }
-  int8_t confidence() const {
-    return GetField<int8_t>(VT_CONFIDENCE, 0);
-  }
-  int16_t on() const {
-    return GetField<int16_t>(VT_ON, 0);
-  }
-  const flatbuffers::String *arrival_track() const {
-    return GetPointer<const flatbuffers::String *>(VT_ARRIVAL_TRACK);
-  }
-  bool Verify(flatbuffers::Verifier &verifier) const {
-    return VerifyTableStart(verifier) &&
-           VerifyField<int8_t>(verifier, VT_STOP_SEQUENCE) &&
-           VerifyOffset(verifier, VT_STOP_ID) &&
-           verifier.Verify(stop_id()) &&
-           VerifyField<int8_t>(verifier, VT_CONFIDENCE) &&
-           VerifyField<int16_t>(verifier, VT_ON) &&
-           VerifyOffset(verifier, VT_ARRIVAL_TRACK) &&
-           verifier.Verify(arrival_track()) &&
-           verifier.EndTable();
-  }
-};
+// struct SubwayTripStop FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+//   enum {
+//     VT_STOP_SEQUENCE = 4,
+//     VT_STOP_ID = 6,
+//     VT_CONFIDENCE = 8,
+//     VT_ON = 10,
+//     VT_ARRIVAL_TRACK = 12
+//   };
+//   int8_t stop_sequence() const {
+//     return GetField<int8_t>(VT_STOP_SEQUENCE, 0);
+//   }
+//   const flatbuffers::String *stop_id() const {
+//     return GetPointer<const flatbuffers::String *>(VT_STOP_ID);
+//   }
+//   int8_t confidence() const {
+//     return GetField<int8_t>(VT_CONFIDENCE, 0);
+//   }
+//   int16_t on() const {
+//     return GetField<int16_t>(VT_ON, 0);
+//   }
+//   const flatbuffers::String *arrival_track() const {
+//     return GetPointer<const flatbuffers::String *>(VT_ARRIVAL_TRACK);
+//   }
+//   bool Verify(flatbuffers::Verifier &verifier) const {
+//     return VerifyTableStart(verifier) &&
+//            VerifyField<int8_t>(verifier, VT_STOP_SEQUENCE) &&
+//            VerifyOffset(verifier, VT_STOP_ID) &&
+//            verifier.Verify(stop_id()) &&
+//            VerifyField<int8_t>(verifier, VT_CONFIDENCE) &&
+//            VerifyField<int16_t>(verifier, VT_ON) &&
+//            VerifyOffset(verifier, VT_ARRIVAL_TRACK) &&
+//            verifier.Verify(arrival_track()) &&
+//            verifier.EndTable();
+//   }
+// };
 
-struct SubwayTripStopBuilder {
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_stop_sequence(int8_t stop_sequence) {
-    fbb_.AddElement<int8_t>(SubwayTripStop::VT_STOP_SEQUENCE, stop_sequence, 0);
-  }
-  void add_stop_id(flatbuffers::Offset<flatbuffers::String> stop_id) {
-    fbb_.AddOffset(SubwayTripStop::VT_STOP_ID, stop_id);
-  }
-  void add_confidence(int8_t confidence) {
-    fbb_.AddElement<int8_t>(SubwayTripStop::VT_CONFIDENCE, confidence, 0);
-  }
-  void add_on(int16_t on) {
-    fbb_.AddElement<int16_t>(SubwayTripStop::VT_ON, on, 0);
-  }
-  void add_arrival_track(flatbuffers::Offset<flatbuffers::String> arrival_track) {
-    fbb_.AddOffset(SubwayTripStop::VT_ARRIVAL_TRACK, arrival_track);
-  }
-  explicit SubwayTripStopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
-        : fbb_(_fbb) {
-    start_ = fbb_.StartTable();
-  }
-  SubwayTripStopBuilder &operator=(const SubwayTripStopBuilder &);
-  flatbuffers::Offset<SubwayTripStop> Finish() {
-    const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SubwayTripStop>(end);
-    return o;
-  }
-};
+// struct SubwayTripStopBuilder {
+//   flatbuffers::FlatBufferBuilder &fbb_;
+//   flatbuffers::uoffset_t start_;
+//   void add_stop_sequence(int8_t stop_sequence) {
+//     fbb_.AddElement<int8_t>(SubwayTripStop::VT_STOP_SEQUENCE, stop_sequence, 0);
+//   }
+//   void add_stop_id(flatbuffers::Offset<flatbuffers::String> stop_id) {
+//     fbb_.AddOffset(SubwayTripStop::VT_STOP_ID, stop_id);
+//   }
+//   void add_confidence(int8_t confidence) {
+//     fbb_.AddElement<int8_t>(SubwayTripStop::VT_CONFIDENCE, confidence, 0);
+//   }
+//   void add_on(int16_t on) {
+//     fbb_.AddElement<int16_t>(SubwayTripStop::VT_ON, on, 0);
+//   }
+//   void add_arrival_track(flatbuffers::Offset<flatbuffers::String> arrival_track) {
+//     fbb_.AddOffset(SubwayTripStop::VT_ARRIVAL_TRACK, arrival_track);
+//   }
+//   explicit SubwayTripStopBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+//         : fbb_(_fbb) {
+//     start_ = fbb_.StartTable();
+//   }
+//   SubwayTripStopBuilder &operator=(const SubwayTripStopBuilder &);
+//   flatbuffers::Offset<SubwayTripStop> Finish() {
+//     const auto end = fbb_.EndTable(start_);
+//     auto o = flatbuffers::Offset<SubwayTripStop>(end);
+//     return o;
+//   }
+// };
 
-inline flatbuffers::Offset<SubwayTripStop> CreateSubwayTripStop(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    int8_t stop_sequence = 0,
-    flatbuffers::Offset<flatbuffers::String> stop_id = 0,
-    int8_t confidence = 0,
-    int16_t on = 0,
-    flatbuffers::Offset<flatbuffers::String> arrival_track = 0) {
-  SubwayTripStopBuilder builder_(_fbb);
-  builder_.add_arrival_track(arrival_track);
-  builder_.add_stop_id(stop_id);
-  builder_.add_on(on);
-  builder_.add_confidence(confidence);
-  builder_.add_stop_sequence(stop_sequence);
-  return builder_.Finish();
-}
+// inline flatbuffers::Offset<SubwayTripStop> CreateSubwayTripStop(
+//     flatbuffers::FlatBufferBuilder &_fbb,
+//     int8_t stop_sequence = 0,
+//     flatbuffers::Offset<flatbuffers::String> stop_id = 0,
+//     int8_t confidence = 0,
+//     int16_t on = 0,
+//     flatbuffers::Offset<flatbuffers::String> arrival_track = 0) {
+//   SubwayTripStopBuilder builder_(_fbb);
+//   builder_.add_arrival_track(arrival_track);
+//   builder_.add_stop_id(stop_id);
+//   builder_.add_on(on);
+//   builder_.add_confidence(confidence);
+//   builder_.add_stop_sequence(stop_sequence);
+//   return builder_.Finish();
+// }
 
-inline flatbuffers::Offset<SubwayTripStop> CreateSubwayTripStopDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    int8_t stop_sequence = 0,
-    const char *stop_id = nullptr,
-    int8_t confidence = 0,
-    int16_t on = 0,
-    const char *arrival_track = nullptr) {
-  return nyc::realtime::CreateSubwayTripStop(
-      _fbb,
-      stop_sequence,
-      stop_id ? _fbb.CreateString(stop_id) : 0,
-      confidence,
-      on,
-      arrival_track ? _fbb.CreateString(arrival_track) : 0);
-}
+// inline flatbuffers::Offset<SubwayTripStop> CreateSubwayTripStopDirect(
+//     flatbuffers::FlatBufferBuilder &_fbb,
+//     int8_t stop_sequence = 0,
+//     const char *stop_id = nullptr,
+//     int8_t confidence = 0,
+//     int16_t on = 0,
+//     const char *arrival_track = nullptr) {
+//   return nyc::realtime::CreateSubwayTripStop(
+//       _fbb,
+//       stop_sequence,
+//       stop_id ? _fbb.CreateString(stop_id) : 0,
+//       confidence,
+//       on,
+//       arrival_track ? _fbb.CreateString(arrival_track) : 0);
+// }
 
-struct SubwayTripPath FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
-    VT_TRIP_ID = 4,
-    VT_STOPS = 6
-  };
-  const flatbuffers::String *trip_id() const {
-    return GetPointer<const flatbuffers::String *>(VT_TRIP_ID);
-  }
-  const flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>> *stops() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>> *>(VT_STOPS);
-  }
-  bool Verify(flatbuffers::Verifier &verifier) const {
-    return VerifyTableStart(verifier) &&
-           VerifyOffset(verifier, VT_TRIP_ID) &&
-           verifier.Verify(trip_id()) &&
-           VerifyOffset(verifier, VT_STOPS) &&
-           verifier.Verify(stops()) &&
-           verifier.VerifyVectorOfTables(stops()) &&
-           verifier.EndTable();
-  }
-};
+// struct SubwayTripPath FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+//   enum {
+//     VT_TRIP_ID = 4,
+//     VT_STOPS = 6
+//   };
+//   const flatbuffers::String *trip_id() const {
+//     return GetPointer<const flatbuffers::String *>(VT_TRIP_ID);
+//   }
+//   const flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>> *stops() const {
+//     return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>> *>(VT_STOPS);
+//   }
+//   bool Verify(flatbuffers::Verifier &verifier) const {
+//     return VerifyTableStart(verifier) &&
+//            VerifyOffset(verifier, VT_TRIP_ID) &&
+//            verifier.Verify(trip_id()) &&
+//            VerifyOffset(verifier, VT_STOPS) &&
+//            verifier.Verify(stops()) &&
+//            verifier.VerifyVectorOfTables(stops()) &&
+//            verifier.EndTable();
+//   }
+// };
 
-struct SubwayTripPathBuilder {
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_trip_id(flatbuffers::Offset<flatbuffers::String> trip_id) {
-    fbb_.AddOffset(SubwayTripPath::VT_TRIP_ID, trip_id);
-  }
-  void add_stops(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>>> stops) {
-    fbb_.AddOffset(SubwayTripPath::VT_STOPS, stops);
-  }
-  explicit SubwayTripPathBuilder(flatbuffers::FlatBufferBuilder &_fbb)
-        : fbb_(_fbb) {
-    start_ = fbb_.StartTable();
-  }
-  SubwayTripPathBuilder &operator=(const SubwayTripPathBuilder &);
-  flatbuffers::Offset<SubwayTripPath> Finish() {
-    const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SubwayTripPath>(end);
-    return o;
-  }
-};
+// struct SubwayTripPathBuilder {
+//   flatbuffers::FlatBufferBuilder &fbb_;
+//   flatbuffers::uoffset_t start_;
+//   void add_trip_id(flatbuffers::Offset<flatbuffers::String> trip_id) {
+//     fbb_.AddOffset(SubwayTripPath::VT_TRIP_ID, trip_id);
+//   }
+//   void add_stops(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>>> stops) {
+//     fbb_.AddOffset(SubwayTripPath::VT_STOPS, stops);
+//   }
+//   explicit SubwayTripPathBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+//         : fbb_(_fbb) {
+//     start_ = fbb_.StartTable();
+//   }
+//   SubwayTripPathBuilder &operator=(const SubwayTripPathBuilder &);
+//   flatbuffers::Offset<SubwayTripPath> Finish() {
+//     const auto end = fbb_.EndTable(start_);
+//     auto o = flatbuffers::Offset<SubwayTripPath>(end);
+//     return o;
+//   }
+// };
 
-inline flatbuffers::Offset<SubwayTripPath> CreateSubwayTripPath(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::String> trip_id = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>>> stops = 0) {
-  SubwayTripPathBuilder builder_(_fbb);
-  builder_.add_stops(stops);
-  builder_.add_trip_id(trip_id);
-  return builder_.Finish();
-}
+// inline flatbuffers::Offset<SubwayTripPath> CreateSubwayTripPath(
+//     flatbuffers::FlatBufferBuilder &_fbb,
+//     flatbuffers::Offset<flatbuffers::String> trip_id = 0,
+//     flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripStop>>> stops = 0) {
+//   SubwayTripPathBuilder builder_(_fbb);
+//   builder_.add_stops(stops);
+//   builder_.add_trip_id(trip_id);
+//   return builder_.Finish();
+// }
 
-inline flatbuffers::Offset<SubwayTripPath> CreateSubwayTripPathDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    const char *trip_id = nullptr,
-    const std::vector<flatbuffers::Offset<SubwayTripStop>> *stops = nullptr) {
-  return nyc::realtime::CreateSubwayTripPath(
-      _fbb,
-      trip_id ? _fbb.CreateString(trip_id) : 0,
-      stops ? _fbb.CreateVector<flatbuffers::Offset<SubwayTripStop>>(*stops) : 0);
-}
+// inline flatbuffers::Offset<SubwayTripPath> CreateSubwayTripPathDirect(
+//     flatbuffers::FlatBufferBuilder &_fbb,
+//     const char *trip_id = nullptr,
+//     const std::vector<flatbuffers::Offset<SubwayTripStop>> *stops = nullptr) {
+//   return nyc::realtime::CreateSubwayTripPath(
+//       _fbb,
+//       trip_id ? _fbb.CreateString(trip_id) : 0,
+//       stops ? _fbb.CreateVector<flatbuffers::Offset<SubwayTripStop>>(*stops) : 0);
+// }
 
-struct SubwayTrip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
-  enum {
-    VT_NYCT_TRIP_ID = 4,
-    VT_TIMESTAMP = 6,
-    VT_PATHS = 8,
-    VT_DIRECTION = 10
-  };
-  const flatbuffers::String *nyct_trip_id() const {
-    return GetPointer<const flatbuffers::String *>(VT_NYCT_TRIP_ID);
-  }
-  int32_t timestamp() const {
-    return GetField<int32_t>(VT_TIMESTAMP, 0);
-  }
-  const flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>> *paths() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>> *>(VT_PATHS);
-  }
-  int8_t direction() const {
-    return GetField<int8_t>(VT_DIRECTION, 0);
-  }
-  bool Verify(flatbuffers::Verifier &verifier) const {
-    return VerifyTableStart(verifier) &&
-           VerifyOffset(verifier, VT_NYCT_TRIP_ID) &&
-           verifier.Verify(nyct_trip_id()) &&
-           VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
-           VerifyOffset(verifier, VT_PATHS) &&
-           verifier.Verify(paths()) &&
-           verifier.VerifyVectorOfTables(paths()) &&
-           VerifyField<int8_t>(verifier, VT_DIRECTION) &&
-           verifier.EndTable();
-  }
-};
+// struct SubwayTrip FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+//   enum {
+//     VT_NYCT_TRIP_ID = 4,
+//     VT_TIMESTAMP = 6,
+//     VT_PATHS = 8,
+//     VT_DIRECTION = 10
+//   };
+//   const flatbuffers::String *nyct_trip_id() const {
+//     return GetPointer<const flatbuffers::String *>(VT_NYCT_TRIP_ID);
+//   }
+//   int32_t timestamp() const {
+//     return GetField<int32_t>(VT_TIMESTAMP, 0);
+//   }
+//   const flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>> *paths() const {
+//     return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>> *>(VT_PATHS);
+//   }
+//   int8_t direction() const {
+//     return GetField<int8_t>(VT_DIRECTION, 0);
+//   }
+//   bool Verify(flatbuffers::Verifier &verifier) const {
+//     return VerifyTableStart(verifier) &&
+//            VerifyOffset(verifier, VT_NYCT_TRIP_ID) &&
+//            verifier.Verify(nyct_trip_id()) &&
+//            VerifyField<int32_t>(verifier, VT_TIMESTAMP) &&
+//            VerifyOffset(verifier, VT_PATHS) &&
+//            verifier.Verify(paths()) &&
+//            verifier.VerifyVectorOfTables(paths()) &&
+//            VerifyField<int8_t>(verifier, VT_DIRECTION) &&
+//            verifier.EndTable();
+//   }
+// };
 
-struct SubwayTripBuilder {
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_nyct_trip_id(flatbuffers::Offset<flatbuffers::String> nyct_trip_id) {
-    fbb_.AddOffset(SubwayTrip::VT_NYCT_TRIP_ID, nyct_trip_id);
-  }
-  void add_timestamp(int32_t timestamp) {
-    fbb_.AddElement<int32_t>(SubwayTrip::VT_TIMESTAMP, timestamp, 0);
-  }
-  void add_paths(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>>> paths) {
-    fbb_.AddOffset(SubwayTrip::VT_PATHS, paths);
-  }
-  void add_direction(int8_t direction) {
-    fbb_.AddElement<int8_t>(SubwayTrip::VT_DIRECTION, direction, 0);
-  }
-  explicit SubwayTripBuilder(flatbuffers::FlatBufferBuilder &_fbb)
-        : fbb_(_fbb) {
-    start_ = fbb_.StartTable();
-  }
-  SubwayTripBuilder &operator=(const SubwayTripBuilder &);
-  flatbuffers::Offset<SubwayTrip> Finish() {
-    const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SubwayTrip>(end);
-    return o;
-  }
-};
+// struct SubwayTripBuilder {
+//   flatbuffers::FlatBufferBuilder &fbb_;
+//   flatbuffers::uoffset_t start_;
+//   void add_nyct_trip_id(flatbuffers::Offset<flatbuffers::String> nyct_trip_id) {
+//     fbb_.AddOffset(SubwayTrip::VT_NYCT_TRIP_ID, nyct_trip_id);
+//   }
+//   void add_timestamp(int32_t timestamp) {
+//     fbb_.AddElement<int32_t>(SubwayTrip::VT_TIMESTAMP, timestamp, 0);
+//   }
+//   void add_paths(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>>> paths) {
+//     fbb_.AddOffset(SubwayTrip::VT_PATHS, paths);
+//   }
+//   void add_direction(int8_t direction) {
+//     fbb_.AddElement<int8_t>(SubwayTrip::VT_DIRECTION, direction, 0);
+//   }
+//   explicit SubwayTripBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+//         : fbb_(_fbb) {
+//     start_ = fbb_.StartTable();
+//   }
+//   SubwayTripBuilder &operator=(const SubwayTripBuilder &);
+//   flatbuffers::Offset<SubwayTrip> Finish() {
+//     const auto end = fbb_.EndTable(start_);
+//     auto o = flatbuffers::Offset<SubwayTrip>(end);
+//     return o;
+//   }
+// };
 
-inline flatbuffers::Offset<SubwayTrip> CreateSubwayTrip(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::String> nyct_trip_id = 0,
-    int32_t timestamp = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>>> paths = 0,
-    int8_t direction = 0) {
-  SubwayTripBuilder builder_(_fbb);
-  builder_.add_paths(paths);
-  builder_.add_timestamp(timestamp);
-  builder_.add_nyct_trip_id(nyct_trip_id);
-  builder_.add_direction(direction);
-  return builder_.Finish();
-}
+// inline flatbuffers::Offset<SubwayTrip> CreateSubwayTrip(
+//     flatbuffers::FlatBufferBuilder &_fbb,
+//     flatbuffers::Offset<flatbuffers::String> nyct_trip_id = 0,
+//     int32_t timestamp = 0,
+//     flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SubwayTripPath>>> paths = 0,
+//     int8_t direction = 0) {
+//   SubwayTripBuilder builder_(_fbb);
+//   builder_.add_paths(paths);
+//   builder_.add_timestamp(timestamp);
+//   builder_.add_nyct_trip_id(nyct_trip_id);
+//   builder_.add_direction(direction);
+//   return builder_.Finish();
+// }
 
-inline flatbuffers::Offset<SubwayTrip> CreateSubwayTripDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    const char *nyct_trip_id = nullptr,
-    int32_t timestamp = 0,
-    const std::vector<flatbuffers::Offset<SubwayTripPath>> *paths = nullptr,
-    int8_t direction = 0) {
-  return nyc::realtime::CreateSubwayTrip(
-      _fbb,
-      nyct_trip_id ? _fbb.CreateString(nyct_trip_id) : 0,
-      timestamp,
-      paths ? _fbb.CreateVector<flatbuffers::Offset<SubwayTripPath>>(*paths) : 0,
-      direction);
-}
+// inline flatbuffers::Offset<SubwayTrip> CreateSubwayTripDirect(
+//     flatbuffers::FlatBufferBuilder &_fbb,
+//     const char *nyct_trip_id = nullptr,
+//     int32_t timestamp = 0,
+//     const std::vector<flatbuffers::Offset<SubwayTripPath>> *paths = nullptr,
+//     int8_t direction = 0) {
+//   return nyc::realtime::CreateSubwayTrip(
+//       _fbb,
+//       nyct_trip_id ? _fbb.CreateString(nyct_trip_id) : 0,
+//       timestamp,
+//       paths ? _fbb.CreateVector<flatbuffers::Offset<SubwayTripPath>>(*paths) : 0,
+//       direction);
+// }
 
-}  // namespace realtime
-}  // namespace nyc
+// }  // namespace realtime
+// }  // namespace nyc
 
-#endif  // FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
+// #endif  // FLATBUFFERS_GENERATED_SESS_NYC_REALTIME_H_
diff --git a/includes/subway/NYCTFeedTracker.h b/includes/subway/NYCTFeedTracker.h
index 949fc1a..3baf5c7 100644
--- a/includes/subway/NYCTFeedTracker.h
+++ b/includes/subway/NYCTFeedTracker.h
@@ -8,7 +8,9 @@
 #include "subway/SubwayTrackedTrip.h"
 #ifndef NO_INTERFACES
 #include "events/EventHolder.h"
-#include "interfaces/SessInterface.h"
+	#ifdef SESS
+	#include "interfaces/SessInterface.h"
+	#endif
 #endif
 #include "events/SubwayTripEvent.h"
 
diff --git a/sources/DynamicNYCTFeedService.cpp b/sources/DynamicNYCTFeedService.cpp
index 5c140a0..6781bd0 100644
--- a/sources/DynamicNYCTFeedService.cpp
+++ b/sources/DynamicNYCTFeedService.cpp
@@ -18,7 +18,7 @@ namespace nyctlib {
 
 		try {
 			SimpleHTTPRequest requester;
-			bool ret = requester.get_save(feed_endpoint.c_str(), file_path.c_str());
+			bool ret = requester.get_save(this->feed_endpoint.c_str(), file_path.c_str(), this->api_key.c_str());
 			if (!ret)
 				throw std::exception(); // yes i am an idiot for doing this
 		} catch (std::exception &ex) {
diff --git a/sources/interfaces/SessInterface.cpp b/sources/interfaces/SessInterface.cpp
index 53fc70d..d0e2485 100644
--- a/sources/interfaces/SessInterface.cpp
+++ b/sources/interfaces/SessInterface.cpp
@@ -1,3 +1,4 @@
+#ifdef SESS
 #include "interfaces/SessInterface.h"
 
 #include "sess_generated.h"
@@ -84,4 +85,5 @@ namespace nyctlib {
 	void SessInterface::concatenate()
 	{
 	}
-}
\ No newline at end of file
+}
+#endif
\ No newline at end of file
diff --git a/sources/interfaces/WSInterface.cpp b/sources/interfaces/WSInterface.cpp
index 3a02154..780d3a6 100644
--- a/sources/interfaces/WSInterface.cpp
+++ b/sources/interfaces/WSInterface.cpp
@@ -1,7 +1,7 @@
 #include <iostream>
 #include <ctime>
 #include <cassert>
-#include <uWS/uWS.h>
+#include <uwebsockets/App.h>
 
 #include "interfaces/WSInterface.h"
 #include "Globals.h"
diff --git a/sources/subway/NYCTFeedTracker.cpp b/sources/subway/NYCTFeedTracker.cpp
index f69e460..e6accf3 100644
--- a/sources/subway/NYCTFeedTracker.cpp
+++ b/sources/subway/NYCTFeedTracker.cpp
@@ -57,7 +57,10 @@ namespace nyctlib {
 			}
 		}
 
+#ifdef SESS
 		SessInterface::commit(nyct_trip_id, last_update_time, 0, m);
+#endif
+
 #endif
 	}
 
